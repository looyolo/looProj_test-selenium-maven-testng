
【1】什么是 Page Object Model 页面对象模式(英文简称 POM )？

自动化测试脚本设计模式之一。
自动化测试脚本面临的一个巨大的挑战，就是尽最大可能减少维护的成本。
假设不得不投入大量的人力、时间去重新编写新脚本（前端经常性代码重构就会遇到这样的问题），
就会导致无法快速响应新的测试需求，长此以往，会严重阻碍自动化测试在项目中的深入实施。

为了提高自动化测试的投入产出比，延长自动化测试脚本的服务质量和使用周期，
Selenium WebDriver 提供了 Pagg Object 页面对象模式 来提高脚本的可维护性。
使用 "面向对象" 的设计模式，POM 将 测试程序代码 和 被测试页面 的 页面元素及其操作方法 进行分离，
以此降低页面元素变化对测试程序代码的影响。
每个被测试页面都被单独定义为一个类，类中会定位所有进行测试操作的页面元素对象，
并且定义操作每一个页面元素对象的方法。

举个例子，
登录页面包含一个用户名输入框和一个密码输入框，还有一个"登录"按钮，
那么，我们声明一个名为 "Login" 的类，并且通过定位表达式找到用户名和密码输入框，
并赋予类中的成员变量，分别定义输入用户名的方法、输入密码的方法和单击"登录"按钮的方法。
    测试程序代码完成登录测试，只需要调用 Login 类中输入用户名的方法、输入密码的方法、
和单击"登录"按钮的方法即可。如果登录页面的页面元素位置发生了变化，我们只需要修改 Login 类中
的相关定位表达式和操作方法就可以完成维护，测试程序代码逻辑 甚至不需要改变。
    如果用户没有使用此模式，用相同的代码段实现登录过程，当在测试过程中需要进行多次登录操作时，
只能粘贴相同的代码来简化编写工作。但可怕的是，一旦页面元素发生了改变，那么就需要人工把所有涉及变化的
逻辑一一修改，需要在不同的测试程序代码中进行搜索和修改，这样反而增加了工作量，而且很容易出现修改错误的情况。
使用 POM ，只需要修改唯一的 Login 类就可以完成了大部分的维护工作。

使用 POM 的 注意事项：
(1) 在 PO 类中定义 public 方法来对外提供服务
(2) 不要暴露 PO 类的内部逻辑
(3) 不要在 PO 类中进行断言操作（除了因为继承 LoadableComponnent 类而必须重写 isLoaded 方法这种情况之外）
(4) 只需要在 PO 类中定义需要操作的页面元素和操作方法
(5) PO 页面中的相同动作，遇到会产生多个不同的结果，需要在 PO 类中定义多个操作方法

