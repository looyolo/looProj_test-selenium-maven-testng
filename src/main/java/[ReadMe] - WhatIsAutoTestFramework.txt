
【1】 什么是 自动化测试框架，到底有什么好处（作用）？？

自动化测试框架 是 应用于自动化测试的程序框架。
它提供了可重用的自动化测试模块，即是说，
提供最基础的自动化测试功能（如打开浏览器，单击等），
提供自动化测试执行和管理功能的架构模块（如 Junit，TestNG 等）。
它是由一个或多个的 自动化测试基础模块、自动化测试管理模块、自动化测试统计模块 等组成的 工具集合。

好处：
    （1）有效组织和管理测试脚本
    （2）自动执行测试脚本
    （3）自动发布测试报告，为持续集成/持续开发（CI/CD)提供脚本支持
    （4）使 不具备编程能力的测试人员 能够开展 自动化测试工作

【2】自动化测试目标 是什么，要怎么验证是否达到了这样的目标，依据是什么？

基于多位 BAT 大厂多年的自动化测试实践，
一个十分通用的测试目标是：提高测试用例的执行效率，快速回归测试，快速给予开发团队质量反馈。

验证方法 可以是 和以前手工测试的执行时间进行对比，评估是否 明显缩短了测试用例的执行时间。

依据是，自动化测试是用 固定的测试代码、测试数据，让机器执行测试用例，而敏捷模式的软件项目需求是随时变化的，
这就必然会造成测试程序需要得到及时的维护更新，因此，测试程序的维护时间，会是自动化测试效率高低的直接体现。

【3】自动化测试框架有 哪些 设计模式？

主流的设计模式 有 4 种：

（1） 数据驱动
是使用 数组数据、数据文件 或 数据库 等 作为 测试输入 的自动化测试框架，
可以在测试执行过程中自动加载测试数据，动态判断测试结果是否符合期望，并自动输出测试报告。
适用于验证 测试系统 处理 多组不同的测试数据 是否能够正常工作。

（2）关键字驱动
可以理解为"数据驱动的增强版"，更高级，可以兼容更多自动化测试操作类型，进一步提升框架使用的灵活性。
是使用 被操作的元素对象、操作方法 和 操作数据 作为 测试输入 的自动化测试框架，
可简单表示为 "item.operation(value)"，
同样可以保存在 数组数据、数据文件 或 数据库 等。
例如，
在页面上的用户名输入框中输入用户名，则可以在数据文件中进行如下定义：
"用户明输入框,输入,用户名"

(3) 混合驱动
在 关键字驱动 中融合了 数据驱动。

(4) 行为驱动
支持将 自然语言 作为 测试用例描述，避免软件项目中不用角色的参与人员协作过程中"需求理解不一致"问题。

【4】 自动化测试框架的 核心设计思想 是什么？

要以"解决测试中的具体问题 和 提高测试工作效率"作为 主要导向 来进行自动化测试款阿吉的设计。
没有最好的，也没有万能的。
核心设计思想：
    将 中高频 使用的脚本代码 进行 抽象，再进行 面向对象 的设计，封装到 公用类的方法中，
    通过调用 公用类的方法，大大降低 测试类 的 脚本复杂度。

【5】 创建和实施 自动化测试框架 的步骤 有哪些？

（1）根据 测试业务 的 手工测试用例，筛选出可自动化执行的测试用例。多见的是一些常规的 "增删改查" 操作
（2）分析得出测试框架需要模拟的 手工操作 和 重复性较高的测试流程和逻辑
（3）根据 测试业务类型 选用 自动化测试框架设计模式（数据驱动、关键字驱动、混合驱动、行为驱动）
（4）确定框架模型后，将框架中常用的 浏览器选择、测试数据处理、文件操作、数据库操作、页面元素的原始操作、日志和报告等
    进行 类方法 的封装实现
（5）对框架代码进行 集成测试 和 系统测试，
（6）采用 Page Object 模式和 TestNG(或 Junit) 框架 编写测试脚本，并使用框架进行自动化测试，验证框架是否满足需求
（7）编写自动化测试框架的 常用 API 文档，以供他人参阅
（8）培训和推广框架的使用群体，对内是测试团队，对外也可以是开发团队（ BAT 大厂"去测试化"）等
（9）坚持不断 收集框架使用过程中的 报障问题 和 反馈意见，
     坚持不断 增加和优化架的功能，
     坚持不断 增加框架中复杂操作的封装效果，尽量降低测试脚本编写的复杂度
（10）定期评估框架的使用效果，评估自动化测试的投入产出比，再逐步扩大应用范围

